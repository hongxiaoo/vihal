# SPDX-License-Identifier: GPL-2.0-or-later

# script for stm32h7r/s family

#
# stm32h7 devices support both JTAG and SWD transports.
#
source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

set _CHIPNAME stm32h7rs

set _ENDIAN little

# Work-area is a space in RAM used for flash programming
# By default use 64kB
if { [info exists WORKAREASIZE] } {
   set _WORKAREASIZE $WORKAREASIZE
} else {
   set _WORKAREASIZE 0x10000
}

if { [using_jtag] } {
   set _CPUTAPID 0x6ba00477
} {
   set _CPUTAPID 0x6ba02477
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

# "-ap-num 1" is very important here, otherwise it does not work.
# Use stlink-dap.cfg for the ST-Link interface for -ap-num 1 support
target create $_CHIPNAME.cpu0 cortex_m -endian little -dap $_CHIPNAME.dap -ap-num 1

$_CHIPNAME.cpu0 configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
#flash bank $_CHIPNAME.bank1.cpu0 stm32h7x 0x08000000 0x10000 0 0 $_CHIPNAME.cpu0

# Make sure that cpu0 is selected
targets $_CHIPNAME.cpu0

# Clock after reset is HSI at 64 MHz, no need of PLL
adapter speed 4000

adapter srst delay 100
if {[using_jtag]} {
 jtag_ntrst_delay 100
}

# use hardware reset
#
# The STM32H7 does not support connect_assert_srst mode because the AXI is
# unavailable while SRST is asserted, and that is used to access the DBGMCU
# component at 0x5C001000 in the examine-end event handler.
#
# It is possible to access the DBGMCU component at 0xE00E1000 via AP2 instead
# of the default AP0, and that works with SRST asserted; however, nonzero AP
# usage does not work with HLA, so is not done by default. That change could be
# made in a local configuration file if connect_assert_srst mode is needed for
# a specific application and a non-HLA adapter is in use.
reset_config srst_nogate

# if srst is not fitted use SYSRESETREQ to
# perform a soft reset
$_CHIPNAME.cpu0 cortex_m reset_config sysresetreq

# Set CSW[27], which according to ARM ADI v5 appendix E1.4 maps to AHB signal
# HPROT[3], which according to AMBA AHB/ASB/APB specification chapter 3.7.3
# makes the data access cacheable. This allows reading and writing data in the
# CPU cache from the debugger, which is far more useful than going straight to
# RAM when operating on typical variables, and is generally no worse when
# operating on special memory locations.
#$_CHIPNAME.dap apcsw 0x08000000 0x08000000

#$_CHIPNAME.cpu0 configure -event reset-init {
#	# Clock after reset is HSI at 64 MHz, no need of PLL
#	adapter speed 4000
#}
